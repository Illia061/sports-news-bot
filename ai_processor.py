
import os
import re
from typing import Dict, Any

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = None
OPENAI_AVAILABLE = False

def init_openai_client():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
    global client, OPENAI_AVAILABLE
    
    try:
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
        
        import openai
        client = openai.OpenAI(api_key=api_key)
        OPENAI_AVAILABLE = True
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e} - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return False
        
def clean_intro(text: str) -> str:
    text = text.strip()

    # –£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–°—å–æ–≥–æ–¥–Ω—ñ, 27 –ª–∏–ø–Ω—è 2025" –∏–ª–∏ "–í—á–æ—Ä–∞, 26 –ª–∏–ø–Ω—è"
    text = re.sub(r"^(–°—å–æ–≥–æ–¥–Ω—ñ|–í—á–æ—Ä–∞)(,)?\s+\d{1,2}\s+\w+\s+\d{4}", "", text, flags=re.IGNORECASE)

    # –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "28 –ª–∏–ø–Ω—è 2025, 18:39")
    text = re.sub(r"^\d{1,2}\s+\w+\s+\d{4},\s*\d{1,2}:\d{2}", "", text)

    # –£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–∏–ø–∞ "–Ü–Ω—à–µ ‚Äì ", "–Ü—Ç–∞–ª—ñ—è ‚Äì –°–µ—Ä—ñ—è –ê ‚Äì "
    text = re.sub(r"^([–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë\s]+) ‚Äì(\s[–ê-–Ø–∞-—è\s]+)? ‚Äì ", "", text)
    text = re.sub(r"^([–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë\s]+) ‚Äì ", "", text)

    return text.strip()
    
def create_enhanced_summary(article_data: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    if client is None:
        init_openai_client()
    
    if not OPENAI_AVAILABLE or not client:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ AI
        return article_data.get('summary', '') or article_data.get('title', '')
    
    try:
        title = article_data.get('title', '')
        content = article_data.get('content', '')
        summary = article_data.get('summary', '')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –≥–æ—Ç–æ–≤—É—é –≤—ã–∂–∏–º–∫—É
        text_to_process = content if content else summary if summary else title
        
        prompt = f""" –¢–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ñ—É—Ç–±–æ–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω
–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π —ñ —Å—Ç–≤–æ—Ä–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π –≤–∏–∫–ª–∞–¥ —Ü—ñ—î—ó —Ñ—É—Ç–±–æ–ª—å–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

–í–∏–º–æ–≥–∏:
- –ó—Ä–æ–∑—É–º—ñ–ª–æ —Ç–∞ —Ü—ñ–∫–∞–≤–æ
- –ó–±–µ—Ä–µ–∂–∏ –≤—Å—ñ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–∫—Ç–∏
- –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
- –Ø–∫—â–æ —É —Å—Ç–∞—Ç—Ç—ñ —î —Ä–µ–π—Ç–∏–Ω–≥ - –ø—É–±–ª—ñ–∫—É—î—à –π–æ–≥–æ –ø–æ–≤–Ω—ñ—Å—Ç—é
- –Ø–∫—â–æ —É —Å—Ç–∞—Ç—Ç—ñ —î –ø—Ä—è–º–∞ –º–æ–≤–∞ - –ø—É–±–ª—ñ–∫—É—î—à —Å—Ç–∏—Å–ª—É –≤–∏–∂–∏–º–∫—É –Ω–∞ 3-4 —Ä–µ—á–µ–Ω–Ω—è

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–¢–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏: {text_to_process[:1000]}

–°—Ç–∏—Å–ª–∏–π –≤–∏–∫–ª–∞–¥:"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": "–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏—Å–ª–∏—Ö –≤–∏–∫–ª–∞–¥—ñ–≤ —Ñ—É—Ç–±–æ–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –¢–≤–æ—è –º–µ—Ç–∞ - –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É —Ü—ñ–∫–∞–≤–æ—é —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ—é. –í–∏–º–æ–≥–∏: –ó—Ä–æ–∑—É–º—ñ–ª–æ —Ç–∞ —Ü—ñ–∫–∞–≤–æ, –ó–±–µ—Ä–µ–∂–∏ –≤—Å—ñ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–∫—Ç–∏, –Ø–∫—â–æ —É —Å—Ç–∞—Ç—Ç—ñ —î —Ä–µ–π—Ç–∏–Ω–≥ - –ø—É–±–ª—ñ–∫—É—î—à –π–æ–≥–æ –ø–æ–≤–Ω—ñ—Å—Ç—é, –Ø–∫—â–æ —É —Å—Ç–∞—Ç—Ç—ñ —î –ø—Ä—è–º–∞ –º–æ–≤–∞ - –ø—É–±–ª—ñ–∫—É—î—à —Å—Ç–∏—Å–ª—É –≤–∏–∂–∏–º–∫—É –Ω–∞ 3-4 —Ä–µ—á–µ–Ω–Ω—è
                    "
                },
                {
                    "role": "user", 
                    "content": prompt
                }
            ],
            max_tokens=400,
            temperature=0.7
        )
        
        enhanced_summary = response.choices[0].message.content.strip()
        return enhanced_summary
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—É—é –≤—ã–∂–∏–º–∫—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        return article_data.get('summary', '') or article_data.get('title', '')

def format_for_social_media(article_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
    """
    try:
        title = article_data.get('title', '')
        summary = article_data.get('summary', '')

        # –ï—Å–ª–∏ –µ—Å—Ç—å AI —Ä–µ–∑—é–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if has_openai_key():
            ai_summary = create_enhanced_summary({"title": title, "content": text})
            ai_summary = clean_intro(ai_summary)
        else:
            ai_summary =  clean_intro(summary)

        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –º—É—Å–æ—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –¥–∞—Ç—ã –∏–∑ —Ä–µ–∑—é–º–µ (–ø—Ä–æ—Å—Ç–µ–π—à–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
        unwanted_prefixes = ["–Ü–Ω—à–µ", "–Ü—Ç–∞–ª—ñ—è", "–Ü—Å–ø–∞–Ω—ñ—è", "–ù—ñ–º–µ—á—á–∏–Ω–∞", "–ß–µ–º–ø—ñ–æ–Ω–∞—Ç", "–°—å–æ–≥–æ–¥–Ω—ñ", "–í—á–æ—Ä–∞"]
        for prefix in unwanted_prefixes:
            if ai_summary.startswith(prefix):
                ai_summary = ai_summary[len(prefix):].strip(": ").lstrip()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        post = f"<b>‚öΩ {title}</b>\n\n"

        if ai_summary and ai_summary != title:
            post += f"{ai_summary}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        post += "#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏ #—Å–ø–æ—Ä—Ç"

        return post

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return f"<b>‚öΩ {article_data.get('title', '')}</b>\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏"


def download_image(image_url: str, filename: str = None) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    try:
        import requests
        from urllib.parse import urlparse
        import os
        
        if not image_url:
            return ""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = "images"
        if not os.path.exists(images_dir):
            os.makedirs(images_dir)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename:
            parsed_url = urlparse(image_url)
            filename = os.path.basename(parsed_url.path)
            if not filename or '.' not in filename:
                filename = f"image_{hash(image_url) % 10000}.jpg"
        
        filepath = os.path.join(images_dir, filename)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        
        response = requests.get(image_url, headers=headers, timeout=10)
        response.raise_for_status()
        
        with open(filepath, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
        return ""

def process_article_for_posting(article_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = format_for_social_media(article_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        image_path = ""
        if article_data.get('image_url'):
            image_path = download_image(article_data['image_url'])
        
        return {
            'title': article_data.get('title', ''),
            'post_text': post_text,
            'image_path': image_path,
            'image_url': article_data.get('image_url', ''),
            'url': article_data.get('url', ''),
            'summary': article_data.get('summary', '')
        }
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ç—Ç—ñ: {e}")
        return {
            'title': article_data.get('title', ''),
            'post_text': f"‚öΩ {article_data.get('title', '')}\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏",
            'image_path': '',
            'image_url': '',
            'url': article_data.get('url', ''),
            'summary': article_data.get('summary', '')
        }

def has_openai_key() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI"""
    if client is None:
        init_openai_client()
    
    return OPENAI_AVAILABLE and bool(os.getenv("OPENAI_API_KEY"))

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
def summarize_news(title: str, url: str) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
    article_data = {
        'title': title,
        'url': url,
        'content': '',
        'summary': title
    }
    
    if has_openai_key():
        return create_enhanced_summary(article_data)
    else:
        return f"üî∏ {title}"

def simple_summarize(title: str, url: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ AI"""
    return f"üî∏ {title}"

def test_ai_processor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ü–†–û–¶–ï–°–°–û–†–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI...")
    init_openai_client()
    
    test_article = {
        'title': '–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª',
        'content': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª. –í—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.',
        'summary': '–ö–æ—Ä–æ—Ç–∫–∏–π –∑–º—ñ—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏',
        'image_url': 'https://example.com/image.jpg',
        'url': 'https://football.ua/test'
    }
    
    print(f"ü§ñ OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if has_openai_key() else '–ù–µ—Ç'}")
    
    if has_openai_key():
        print("‚úÖ OpenAI API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ")
        try:
            summary = create_enhanced_summary(test_article)
            print(f"üìù AI —Ä–µ–∑—é–º–µ: {summary}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI —Ä–µ–∑—é–º–µ: {e}")
    else:
        print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...")
    post = format_for_social_media(test_article)
    print(f"üì± –ü–æ—Å—Ç –¥–ª—è —Å–æ—Ü–º–µ—Ä–µ–∂:\n{post}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_ai_processor()
