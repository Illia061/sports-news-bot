
import openai
import requests
from bs4 import BeautifulSoup
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def get_article_content(url):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ —Å —Å–∞–π—Ç–∞"""
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                          "AppleWebKit/537.36 (KHTML, like Gecko) "
                          "Chrome/120.0.0.0 Safari/537.36"
        }
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, "html.parser")
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
        content_selectors = [
            '.article-content',
            '.post-content', 
            '.news-content',
            '.content',
            'article p',
            '.main-content p'
        ]
        
        content = ""
        for selector in content_selectors:
            elements = soup.select(selector)
            if elements:
                content = " ".join([elem.get_text(strip=True) for elem in elements])
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –±–µ—Ä–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        if not content:
            paragraphs = soup.find_all('p')
            content = " ".join([p.get_text(strip=True) for p in paragraphs[:5]])
        
        return content[:2000] if content else ""  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return ""

def summarize_news(title, url):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏
        article_content = get_article_content(url)
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if not article_content:
            article_content = title
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
        prompt = f"""
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–π —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ.
–†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –î–ª–∏–Ω–æ–π 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ü–æ–Ω—è—Ç–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
- –ù–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {article_content}

–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:"""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API OpenAI
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—é–º–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=200,
            temperature=0.7
        )
        
        summary = response.choices[0].message.content.strip()
        return summary
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
        return f"–†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}"

def translate_to_ukrainian(text):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫"""
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª –∏ —Å—Ç–∏–ª—å."},
                {"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫:\n\n{text}"}
            ],
            max_tokens=300,
            temperature=0.3
        )
        
        translation = response.choices[0].message.content.strip()
        return translation
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ OpenAI (–µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞)
def simple_summarize(title, url):
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI"""
    try:
        content = get_article_content(url)
        if content:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ —Ä–µ–∑—é–º–µ
            summary = content[:200] + "..." if len(content) > 200 else content
            return f"üî∏ {summary}"
        else:
            return f"üî∏ {title}"
    except:
        return f"üî∏ {title}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_ai_processor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É AI –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    test_title = "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å"
    test_url = "https://football.ua/"
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º AI –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if os.getenv("OPENAI_API_KEY"):
        print("OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å AI...")
        summary = summarize_news(test_title, test_url)
        print(f"AI —Ä–µ–∑—é–º–µ: {summary}")
    else:
        print("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ...")
        summary = simple_summarize(test_title, test_url)
        print(f"–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ: {summary}")

if __name__ == "__main__":
    test_ai_processor()
