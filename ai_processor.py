import os
import requests
from typing import Dict, Any
from urllib.parse import urlparse
import google.generativeai as genai
import time

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_AVAILABLE = False
model = None

def init_gemini():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ Gemini"""
    global GEMINI_AVAILABLE, model
    if not GEMINI_API_KEY:
        print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel("models/gemini-pro")
        GEMINI_AVAILABLE = True
        print("‚úÖ Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")

def has_gemini_key() -> bool:
    if not GEMINI_AVAILABLE:
        init_gemini()
    return GEMINI_AVAILABLE

def create_enhanced_summary(article_data: Dict[str, Any]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ Gemini"""
    if not has_gemini_key() or not model:
        return article_data.get('summary', '') or article_data.get('title', '')

    title = article_data.get('title', '')
    content = article_data.get('content', '') or article_data.get('summary', '') or title

    prompt = f"""–¢–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ñ—É—Ç–±–æ–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω.
–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π —ñ —Å—Ç–≤–æ—Ä–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π –≤–∏–∫–ª–∞–¥ —Ü—ñ—î—ó —Ñ—É—Ç–±–æ–ª—å–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

–í–∏–º–æ–≥–∏:
- –ó—Ä–æ–∑—É–º—ñ–ª–æ —Ç–∞ —Ü—ñ–∫–∞–≤–æ
- –ó–±–µ—Ä–µ–∂–∏ –≤—Å—ñ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–∫—Ç–∏
- –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
- –ë–µ–∑ –∑–∞–π–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π
- –Ø–∫—â–æ —î —Ä–µ–π—Ç–∏–Ω–≥ ‚Äî –ø—É–±–ª—ñ–∫—É–π –ø–æ–≤–Ω—ñ—Å—Ç—é
- –Ø–∫—â–æ —î –ø—Ä—è–º–∞ –º–æ–≤–∞ ‚Äî –≤–∏–∫–ª–∞–¥–∏ —ó—ó –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞ 3‚Äì4 —Ä–µ—á–µ–Ω–Ω—è
- –ú–∞–∫—Å–∏–º—É–º 200-250 —Å–ª—ñ–≤

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–¢–µ–∫—Å—Ç: {content}

–°—Ç–∏—Å–ª–∏–π –≤–∏–∫–ª–∞–¥:
"""
    try:
        response = model.generate_content(prompt)
        summary = response.text.strip()
        # Ensure summary isn't just the title
        if summary.lower() == title.lower():
            return content[:200] + '...' if len(content) > 200 else content
        return summary
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Gemini: {e}")
        time.sleep(1)  # Small delay to prevent rate limiting
        return content[:200] + '...' if len(content) > 200 else content

def format_for_social_media(article_data: Dict[str, Any]) -> str:
    title = article_data.get('title', '')
    content = article_data.get('content', '')
    summary = article_data.get('summary', '')

    if has_gemini_key():
        ai_summary = create_enhanced_summary({
            'title': title,
            'content': content,  # Use full content for AI processing
            'summary': summary
        })
    else:
        ai_summary = summary or content[:200] + '...' if len(content) > 200 else content

    # Remove unwanted prefixes
    unwanted_prefixes = ["–Ü–Ω—à–µ", "–Ü—Ç–∞–ª—ñ—è", "–Ü—Å–ø–∞–Ω—ñ—è", "–ù—ñ–º–µ—á—á–∏–Ω–∞", "–ß–µ–º–ø—ñ–æ–Ω–∞—Ç", "–°—å–æ–≥–æ–¥–Ω—ñ", "–í—á–æ—Ä–∞"]
    for prefix in unwanted_prefixes:
        if ai_summary.startswith(prefix):
            ai_summary = ai_summary[len(prefix):].strip(": ").lstrip()

    post = f"<b>‚öΩ {title}</b>\n\n"
    if ai_summary and ai_summary != title:
        post += f"{ai_summary}\n\n"

    post += "#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏ #—Å–ø–æ—Ä—Ç"
    return post

def download_image(image_url: str, filename: str = None) -> str:
    try:
        if not image_url:
            return ""
        images_dir = "images"
        os.makedirs(images_dir, exist_ok=True)
        if not filename:
            parsed_url = urlparse(image_url)
            filename = os.path.basename(parsed_url.path)
            if not filename or '.' not in filename:
                filename = f"image_{hash(image_url) % 10000}.jpg"
        filepath = os.path.join(images_dir, filename)
        response = requests.get(image_url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
        response.raise_for_status()
        with open(filepath, 'wb') as f:
            f.write(response.content)
        return filepath
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return ""

def process_article_for_posting(article_data: Dict[str, Any]) -> Dict[str, Any]:
    post_text = format_for_social_media(article_data)
    image_path = download_image(article_data['image_url']) if article_data.get('image_url') else ""
    return {
        'title': article_data.get('title', ''),
        'post_text': post_text,
        'image_path': image_path,
        'image_url': article_data.get('image_url', ''),
        'url': article_data.get('url', ''),
        'summary': article_data.get('summary', '')
    }

# Old compatible interfaces
def summarize_news(title: str, url: str, content: str = '') -> str:
    article_data = {'title': title, 'url': url, 'content': content, 'summary': title}
    return create_enhanced_summary(article_data) if has_gemini_key() else f"üî∏ {title}"

def simple_summarize(title: str, url: str) -> str:
    return f"üî∏ {title}"

def simple_summarize(title: str, url: str) -> str:
    return f"üî∏ {title}"

