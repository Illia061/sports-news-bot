import os
import re
from typing import Dict, Any

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = None
OPENAI_AVAILABLE = False

def init_openai_client():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
    global client, OPENAI_AVAILABLE
    
    try:
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
        
        import openai
        client = openai.OpenAI(api_key=api_key)
        OPENAI_AVAILABLE = True
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e} - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return False

def clean_intro(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not text or not isinstance(text, str):
        return ""
    
    text = text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–º–≤–æ–ª—ã (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
    if len(text) > 50 and text.count('. ') > len(text) // 10:
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ - –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —Å–∏–º–≤–æ–ª—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É")
        return text

    # –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—ã –≤ –Ω–∞—á–∞–ª–µ
    text = re.sub(r"^(–°—å–æ–≥–æ–¥–Ω—ñ|–í—á–æ—Ä–∞)(,)?\s+\d{1,2}\s+\w+\s+\d{4}", "", text, flags=re.IGNORECASE)
    text = re.sub(r"^\d{1,2}\s+\w+\s+\d{4},\s*\d{1,2}:\d{2}", "", text)

    # –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    text = re.sub(r"^([–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë\s]+) ‚Äì(\s[–ê-–Ø–∞-—è\s]+)? ‚Äì ", "", text)
    text = re.sub(r"^([–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë\s]+) ‚Äì ", "", text)

    return text.strip()
    
def create_enhanced_summary(article_data: Dict[str, Any]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    if client is None:
        init_openai_client()
    
    if not OPENAI_AVAILABLE or not client:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ AI
        return article_data.get('summary', '') or article_data.get('title', '')
    
    try:
        title = article_data.get('title', '')
        content = article_data.get('content', '')
        summary = article_data.get('summary', '')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –≥–æ—Ç–æ–≤—É—é –≤—ã–∂–∏–º–∫—É
        text_to_process = content if content else summary if summary else title
        
        print(f"ü§ñ –°–æ–∑–¥–∞–µ–º AI —Ä–µ–∑—é–º–µ –¥–ª—è: {title[:50]}...")
        print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {repr(text_to_process[:200])}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ –ø—Ä–æ–º–ø—Ç–∞
        prompt = f"""Please create a brief summary of this Ukrainian football news article.

REQUIREMENTS:
- Write the summary in Ukrainian language
- If the article contains a rating/top list (like "–¢–æ–ø-10"), include it completely with all positions
- Keep all names, numbers, and positions from rankings
- Write naturally in Ukrainian, don't break words into separate characters
- Maximum 3-4 sentences plus the complete ranking if present

Title: {title}

Article content:
{text_to_process}

Please provide the summary in Ukrainian:"""

        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": """You are an expert at creating brief summaries of football news in Ukrainian language.
IMPORTANT: If the news contains any rating, top list, or numbered list - you MUST include it completely.
Always write in natural Ukrainian language. Never break words into separate characters."""
                },
                {
                    "role": "user", 
                    "content": prompt
                }
            ],
            max_tokens=600,
            temperature=0.2,  # –ï—â–µ –º–µ–Ω—å—à–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            top_p=0.9,
            frequency_penalty=0.0,
            presence_penalty=0.0
        )
        
        enhanced_summary = response.choices[0].message.content.strip()
        
        print(f"üîç AI –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {repr(enhanced_summary[:200])}")
        print(f"üìä –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(enhanced_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "—Ä–∞–∑–±–∏—Ç—ã–π" —Ç–µ–∫—Å—Ç
        char_count = sum(1 for c in enhanced_summary if c == '.')
        space_count = sum(1 for c in enhanced_summary if c == ' ')
        total_chars = len(enhanced_summary)
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: —Ç–æ—á–µ–∫={char_count}, –ø—Ä–æ–±–µ–ª–æ–≤={space_count}, –≤—Å–µ–≥–æ={total_chars}")
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç
        if total_chars > 100 and char_count > total_chars / 20:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù –†–ê–ó–ë–ò–¢–´–ô –¢–ï–ö–°–¢!")
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç: {enhanced_summary[:300]}")
            
            # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
            print("üîÑ –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç...")
            
            simple_prompt = f"""Summarize this Ukrainian football article in Ukrainian. Include any rankings completely.

{title}

{text_to_process[:500]}

Summary in Ukrainian:"""
            
            response2 = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "user", "content": simple_prompt}
                ],
                max_tokens=400,
                temperature=0.1
            )
            
            enhanced_summary2 = response2.choices[0].message.content.strip()
            print(f"üîç –í—Ç–æ—Ä–æ–π AI –æ—Ç–≤–µ—Ç: {repr(enhanced_summary2[:200])}")
            
            # –ï—Å–ª–∏ –∏ –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–ª–æ—Ö–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            char_count2 = sum(1 for c in enhanced_summary2 if c == '.')
            if len(enhanced_summary2) > 100 and char_count2 > len(enhanced_summary2) / 20:
                print("‚ùå –ò –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç —Ä–∞–∑–±–∏—Ç—ã–π! –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback...")
                # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ fallback
                sentences = []
                for line in text_to_process.split('\n'):
                    line = line.strip()
                    if len(line) > 20 and not line.startswith(('–¢–æ–ø-', '1.', '2.')):
                        sentences.append(line)
                    if len(sentences) >= 2:
                        break
                
                result = '. '.join(sentences[:2])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                if '–¢–æ–ø-' in text_to_process:
                    lines = text_to_process.split('\n')
                    rating_started = False
                    rating_lines = []
                    
                    for line in lines:
                        line = line.strip()
                        if '–¢–æ–ø-' in line and ':' in line:
                            rating_started = True
                            rating_lines.append(line)
                        elif rating_started and line and (line[0].isdigit() or ';' in line):
                            rating_lines.append(line)
                        elif rating_started and not line:
                            break
                    
                    if rating_lines:
                        result += '\n\n' + '\n'.join(rating_lines)
                
                return result
            else:
                enhanced_summary = enhanced_summary2
        
        print(f"‚úÖ AI —Ä–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return enhanced_summary
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ: {e}")
        import traceback
        traceback.print_exc()
        
        # Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞
        content = article_data.get('content', '')
        if content:
            return content[:300] + "..." if len(content) > 300 else content
        return article_data.get('summary', '') or article_data.get('title', '')

def format_for_social_media(article_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö"""
    try:
        title = article_data.get('title', '')
        summary = article_data.get('summary', '')
        content = article_data.get('content', '')
        
        print(f"üì± –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π: {title[:50]}...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –∏–ª–∏ –±–∞–∑–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
        if has_openai_key():
            print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ...")
            ai_summary = create_enhanced_summary(article_data)
            # –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º clean_intro –∫ AI —Ä–µ–∑—é–º–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            final_summary = ai_summary
        else:
            print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–µ–∑—é–º–µ...")
            final_summary = clean_intro(summary or content[:200])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç
        post = f"<b>‚öΩ {title}</b>\n\n"

        if final_summary and final_summary != title and len(final_summary.strip()) > 10:
            post += f"{final_summary}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        post += "#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏ #—Å–ø–æ—Ä—Ç"
        
        print(f"‚úÖ –ü–æ—Å—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: {len(post)} —Å–∏–º–≤–æ–ª–æ–≤")
        return post

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return f"<b>‚öΩ {article_data.get('title', '')}</b>\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏"

def download_image(image_url: str, filename: str = None) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        import requests
        from urllib.parse import urlparse
        import os
        
        if not image_url:
            return ""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = "images"
        if not os.path.exists(images_dir):
            os.makedirs(images_dir)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename:
            parsed_url = urlparse(image_url)
            filename = os.path.basename(parsed_url.path)
            if not filename or '.' not in filename:
                filename = f"image_{hash(image_url) % 10000}.jpg"
        
        filepath = os.path.join(images_dir, filename)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        
        response = requests.get(image_url, headers=headers, timeout=10)
        response.raise_for_status()
        
        with open(filepath, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
        return ""

def process_article_for_posting(article_data: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é: {article_data.get('title', '')[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = format_for_social_media(article_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        image_path = ""
        if article_data.get('image_url'):
            print(f"üñºÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {article_data['image_url'][:50]}...")
            image_path = download_image(article_data['image_url'])
        
        result = {
            'title': article_data.get('title', ''),
            'post_text': post_text,
            'image_path': image_path,
            'image_url': article_data.get('image_url', ''),
            'url': article_data.get('url', ''),
            'summary': article_data.get('summary', ''),
            'ai_used': has_openai_key()
        }
        
        print(f"‚úÖ –°—Ç–∞—Ç—å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: AI={'–î–∞' if has_openai_key() else '–ù–µ—Ç'}")
        return result
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ç—Ç—ñ: {e}")
        return {
            'title': article_data.get('title', ''),
            'post_text': f"‚öΩ {article_data.get('title', '')}\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏",
            'image_path': '',
            'image_url': '',
            'url': article_data.get('url', ''),
            'summary': article_data.get('summary', ''),
            'ai_used': False
        }

def has_openai_key() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI"""
    if client is None:
        init_openai_client()
    
    return OPENAI_AVAILABLE and bool(os.getenv("OPENAI_API_KEY"))

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
def summarize_news(title: str, url: str) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
    article_data = {
        'title': title,
        'url': url,
        'content': '',
        'summary': title
    }
    
    if has_openai_key():
        return create_enhanced_summary(article_data)
    else:
        return f"üî∏ {title}"

def simple_summarize(title: str, url: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ AI"""
    return f"üî∏ {title}"

if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI –∫–ª—é—á–∞
    if has_openai_key():
        print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω - AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    else:
        print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
