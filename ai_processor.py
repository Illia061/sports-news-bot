
import openai
import os
from typing import Dict, Any

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def create_enhanced_summary(article_data: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏
    """
    try:
        title = article_data.get('title', '')
        content = article_data.get('content', '')
        summary = article_data.get('summary', '')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –≥–æ—Ç–æ–≤—É—é –≤—ã–∂–∏–º–∫—É
        text_to_process = content if content else summary if summary else title
        
        prompt = f"""
–°—Ç–≤–æ—Ä–∏ —Å—Ç–∏—Å–ª–∏–π —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π –≤–∏–∫–ª–∞–¥ —Ü—ñ—î—ó —Ñ—É—Ç–±–æ–ª—å–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

–í–∏–º–æ–≥–∏:
- 2-3 —Ä–µ—á–µ–Ω–Ω—è
- –ó—Ä–æ–∑—É–º—ñ–ª–æ —Ç–∞ —Ü—ñ–∫–∞–≤–æ
- –ó–±–µ—Ä–µ–∂–∏ –≤—Å—ñ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–∫—Ç–∏
- –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
- –ë–µ–∑ –∑–∞–π–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–¢–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏: {text_to_process[:1000]}

–°—Ç–∏—Å–ª–∏–π –≤–∏–∫–ª–∞–¥:"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": "–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏—Å–ª–∏—Ö –≤–∏–∫–ª–∞–¥—ñ–≤ —Ñ—É—Ç–±–æ–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –¢–≤–æ—è –º–µ—Ç–∞ - –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É —Ü—ñ–∫–∞–≤–æ—é —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ—é."
                },
                {
                    "role": "user", 
                    "content": prompt
                }
            ],
            max_tokens=200,
            temperature=0.7
        )
        
        enhanced_summary = response.choices[0].message.content.strip()
        return enhanced_summary
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—É—é –≤—ã–∂–∏–º–∫—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        return article_data.get('summary', '') or article_data.get('title', '')

def format_for_social_media(article_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
    """
    try:
        title = article_data.get('title', '')
        summary = article_data.get('summary', '')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å AI —Ä–µ–∑—é–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if has_openai_key():
            ai_summary = create_enhanced_summary(article_data)
        else:
            ai_summary = summary
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç
        post = f"‚öΩ {title}\n\n"
        
        if ai_summary and ai_summary != title:
            post += f"{ai_summary}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        post += "#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏ #—Å–ø–æ—Ä—Ç"
        
        return post
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return f"‚öΩ {article_data.get('title', '')}\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏"

def download_image(image_url: str, filename: str = None) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    """
    try:
        import requests
        from urllib.parse import urlparse
        import os
        
        if not image_url:
            return ""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_dir = "images"
        if not os.path.exists(images_dir):
            os.makedirs(images_dir)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not filename:
            parsed_url = urlparse(image_url)
            filename = os.path.basename(parsed_url.path)
            if not filename or '.' not in filename:
                filename = f"image_{hash(image_url) % 10000}.jpg"
        
        filepath = os.path.join(images_dir, filename)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
        
        response = requests.get(image_url, headers=headers, timeout=10)
        response.raise_for_status()
        
        with open(filepath, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
        return ""

def process_article_for_posting(article_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = format_for_social_media(article_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        image_path = ""
        if article_data.get('image_url'):
            image_path = download_image(article_data['image_url'])
        
        return {
            'title': article_data.get('title', ''),
            'post_text': post_text,
            'image_path': image_path,
            'image_url': article_data.get('image_url', ''),
            'url': article_data.get('url', ''),
            'summary': article_data.get('summary', '')
        }
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ç—Ç—ñ: {e}")
        return {
            'title': article_data.get('title', ''),
            'post_text': f"‚öΩ {article_data.get('title', '')}\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏",
            'image_path': '',
            'image_url': '',
            'url': article_data.get('url', ''),
            'summary': article_data.get('summary', '')
        }

def has_openai_key() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞"""
    return bool(os.getenv("OPENAI_API_KEY"))

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
def summarize_news(title: str, url: str) -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
    article_data = {
        'title': title,
        'url': url,
        'content': '',
        'summary': title
    }
    
    if has_openai_key():
        return create_enhanced_summary(article_data)
    else:
        return f"üî∏ {title}"

def simple_summarize(title: str, url: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ AI"""
    return f"üî∏ {title}"

def test_ai_processor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    test_article = {
        'title': '–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª',
        'content': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ —Ñ—É—Ç–±–æ–ª. –í—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.',
        'summary': '–ö–æ—Ä–æ—Ç–∫–∏–π –∑–º—ñ—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏',
        'image_url': 'https://example.com/image.jpg',
        'url': 'https://football.ua/test'
    }
    
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ AI –ø—Ä–æ—Ü–µ—Å–æ—Ä...")
    
    if has_openai_key():
        print("‚úÖ OpenAI API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ")
        summary = create_enhanced_summary(test_article)
        print(f"üìù AI —Ä–µ–∑—é–º–µ: {summary}")
    else:
        print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    post = format_for_social_media(test_article)
    print(f"üì± –ü–æ—Å—Ç –¥–ª—è —Å–æ—Ü–º–µ—Ä–µ–∂:\n{post}")

if __name__ == "__main__":
    test_ai_processor()
