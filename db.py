import sqlite3
import os
from datetime import datetime, timedelta
from typing import Optional

db_path = os.path.join(os.path.dirname(__file__), "news.db")
conn = sqlite3.connect(db_path, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute("CREATE TABLE IF NOT EXISTS posted_news (title TEXT PRIMARY KEY, posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)")
cursor.execute("CREATE TABLE IF NOT EXISTS bot_runs (id INTEGER PRIMARY KEY, last_run TIMESTAMP)")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É posted_at –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
try:
    cursor.execute("ALTER TABLE posted_news ADD COLUMN posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    conn.commit()
except sqlite3.OperationalError:
    pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

conn.commit()

def is_already_posted(title: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"""
    cursor.execute("SELECT 1 FROM posted_news WHERE title = ?", (title,))
    return cursor.fetchone() is not None

def save_posted(title: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    cursor.execute("INSERT OR REPLACE INTO posted_news (title, posted_at) VALUES (?, ?)", 
                   (title, datetime.now()))
    conn.commit()

def get_last_run_time() -> Optional[datetime]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    cursor.execute("SELECT last_run FROM bot_runs ORDER BY id DESC LIMIT 1")
    result = cursor.fetchone()
    
    if result:
        return datetime.fromisoformat(result[0])
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è 20 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        return datetime.now() - timedelta(minutes=20)

def update_last_run_time() -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    current_time = datetime.now()
    cursor.execute("INSERT INTO bot_runs (last_run) VALUES (?)", (current_time,))
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
    cursor.execute("DELETE FROM bot_runs WHERE id NOT IN (SELECT id FROM bot_runs ORDER BY id DESC LIMIT 10)")
    
    conn.commit()

def cleanup_old_posts(days: int = 7) -> None:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å—Ç–∞—Ö (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
    cutoff_date = datetime.now() - timedelta(days=days)
    cursor.execute("DELETE FROM posted_news WHERE posted_at < ?", (cutoff_date,))
    conn.commit()
    
    deleted_count = cursor.rowcount
    if deleted_count > 0:
        print(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å—Ç–∞—Ö")

def get_posted_news_since(since_time: datetime) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    cursor.execute("SELECT title, posted_at FROM posted_news WHERE posted_at >= ? ORDER BY posted_at DESC", 
                   (since_time,))
    return cursor.fetchall()

def debug_db_state() -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
    print("üîç –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    print("=" * 50)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫
    last_run = get_last_run_time()
    print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_run}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    cursor.execute("SELECT COUNT(*) FROM posted_news")
    posts_count = cursor.fetchone()[0]
    print(f"üì∞ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å—Ç–∞—Ö: {posts_count}")
    
    cursor.execute("SELECT COUNT(*) FROM bot_runs")
    runs_count = cursor.fetchone()[0]
    print(f"üîÑ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–ø—É—Å–∫–∞—Ö: {runs_count}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
    cursor.execute("SELECT title, posted_at FROM posted_news ORDER BY posted_at DESC LIMIT 5")
    recent_posts = cursor.fetchall()
    
    if recent_posts:
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤:")
        for title, posted_at in recent_posts:
            posted_datetime = datetime.fromisoformat(posted_at) if isinstance(posted_at, str) else posted_at
            print(f"   üìù {posted_datetime.strftime('%H:%M %d.%m')}: {title[:50]}...")
    
    print("=" * 50)

if __name__ == "__main__":
    debug_db_state()
