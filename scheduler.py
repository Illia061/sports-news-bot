#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import schedule
import time
import subprocess
import sys
from datetime import datetime, time as dt_time
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scheduler.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class NewsScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.working_hours_start = dt_time(6, 0)   # 6:00 —É—Ç—Ä–∞
        self.working_hours_end = dt_time(1, 0)     # 1:00 –Ω–æ—á–∏ (—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
        self.interval_minutes = 20
        self.is_running = False
    
    def is_working_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—á–µ–µ –ª–∏ –≤—Ä–µ–º—è"""
        current_time = datetime.now().time()
        
        # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: —Å 1:00 –¥–æ 6:00 - –ø–µ—Ä–µ—Ä—ã–≤
        if self.working_hours_end <= current_time < self.working_hours_start:
            return False
        
        return True
    
    def run_main_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"""
        if not self.is_working_hours():
            logger.info("‚è∞ –°–µ–π—á–∞—Å –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ (1:00-6:00). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")
            return
        
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")
            return
        
        self.is_running = True
        current_time = datetime.now().strftime('%H:%M:%S %d.%m.%Y')
        
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ {current_time}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º main.py –≤ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–µ
            result = subprocess.run(
                [sys.executable, 'main.py'],
                capture_output=True,
                text=True,
                encoding='utf-8',
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                if result.stdout:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    important_lines = [
                        line for line in result.stdout.split('\n') 
                        if any(keyword in line for keyword in [
                            '‚úÖ', '‚ùå', 'üö´', 'üì¢', '–£–°–ü–ï–®–ù–û', '–û–®–ò–ë–ö–ê', '–î–£–ë–õ–ò–ö–ê–¢'
                        ])
                    ]
                    for line in important_lines[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                        if line.strip():
                            logger.info(f"   {line.strip()}")
            else:
                logger.error(f"‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
                if result.stderr:
                    logger.error(f"–û—à–∏–±–∫–∞: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            self.is_running = False
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞")
        logger.info(f"‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {self.working_hours_start.strftime('%H:%M')} - {self.working_hours_end.strftime('%H:%M')}")
        logger.info(f"üïê –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {self.interval_minutes} –º–∏–Ω—É—Ç")
        logger.info("=" * 60)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
        schedule.every(self.interval_minutes).minutes.do(self.run_main_bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Å—Ä–∞–∑—É (–µ—Å–ª–∏ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è)
        if self.is_working_hours():
            logger.info("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É...")
            self.run_main_bot()
        else:
            logger.info("‚è∞ –°–µ–π—á–∞—Å –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞. –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–π —á–∞—Å
                current_time = datetime.now()
                if current_time.minute == 0:  # –ö–∞–∂–¥—ã–π —á–∞—Å
                    if self.is_working_hours():
                        logger.info(f"üìä –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {schedule.idle_seconds():.0f} —Å–µ–∫.")
                    else:
                        next_work_start = datetime.combine(
                            current_time.date() if current_time.time() >= self.working_hours_start 
                            else current_time.date(),
                            self.working_hours_start
                        )
                        if current_time.time() >= self.working_hours_start:
                            next_work_start = next_work_start.replace(day=next_work_start.day + 1)
                        
                        hours_until_work = (next_work_start - current_time).total_seconds() / 3600
                        logger.info(f"üò¥ –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞. –î–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: {hours_until_work:.1f} —á–∞—Å–æ–≤")
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    def test_schedule(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê")
        logger.info("=" * 40)
        
        current_time = datetime.now()
        logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M:%S %d.%m.%Y')}")
        logger.info(f"‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {self.working_hours_start.strftime('%H:%M')} - {self.working_hours_end.strftime('%H:%M')}")
        logger.info(f"‚úÖ –°–µ–π—á–∞—Å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {'–î–∞' if self.is_working_hours() else '–ù–µ—Ç'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω
        test_times = [
            dt_time(5, 30),   # –î–æ —Ä–∞–±–æ—Ç—ã
            dt_time(6, 0),    # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
            dt_time(12, 0),   # –°–µ—Ä–µ–¥–∏–Ω–∞ –¥–Ω—è
            dt_time(23, 0),   # –í–µ—á–µ—Ä
            dt_time(1, 0),    # –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã
            dt_time(3, 0),    # –ù–æ—á—å
        ]
        
        logger.info("\nüîç –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω:")
        for test_time in test_times:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∞
            original_time = datetime.now().time
            datetime.now = lambda: datetime.combine(datetime.today(), test_time)
            
            is_working = self.is_working_hours()
            status = "üü¢ –†–∞–±–æ—Ç–∞–µ–º" if is_working else "üî¥ –ü–µ—Ä–µ—Ä—ã–≤"
            logger.info(f"   {test_time.strftime('%H:%M')} - {status}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            datetime.now = lambda: datetime.combine(datetime.today(), original_time())


class SimpleScheduler:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è Railway (–µ—Å–ª–∏ schedule –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"""
    
    def __init__(self):
        self.working_hours_start = 6   # 6:00
        self.working_hours_end = 1     # 1:00 (—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
        self.interval_minutes = 20
    
    def is_working_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"""
        current_hour = datetime.now().hour
        
        # –° 1:00 –¥–æ 6:00 - –ø–µ—Ä–µ—Ä—ã–≤
        if 1 <= current_hour < 6:
            return False
        return True
    
    async def run_continuous(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        logger.info(f"‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 06:00 - 01:00")
        logger.info(f"üïê –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {self.interval_minutes} –º–∏–Ω—É—Ç")
        
        while True:
            try:
                current_time = datetime.now()
                
                if self.is_working_time():
                    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {current_time.strftime('%H:%M:%S')}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º main.py
                    process = await asyncio.create_subprocess_exec(
                        sys.executable, 'main.py',
                        stdout=asyncio.subprocess.PIPE,
                        stderr=asyncio.subprocess.PIPE
                    )
                    
                    try:
                        stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=300)
                        
                        if process.returncode == 0:
                            logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                        else:
                            logger.error(f"‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {stderr.decode()}")
                            
                    except asyncio.TimeoutError:
                        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞")
                        process.kill()
                    
                    # –ñ–¥–µ–º 20 –º–∏–Ω—É—Ç
                    logger.info(f"‚è≥ –ñ–¥–µ–º {self.interval_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
                    await asyncio.sleep(self.interval_minutes * 60)
                    
                else:
                    # –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ - –∂–¥–µ–º –¥–æ 6:00
                    next_run_hour = 6
                    current_hour = current_time.hour
                    
                    if current_hour >= 6:  # –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 6, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–≤—Ç—Ä–∞
                        hours_to_wait = 24 - current_hour + 6
                    else:  # –ï—Å–ª–∏ –¥–æ 6, –∂–¥–µ–º –¥–æ 6
                        hours_to_wait = 6 - current_hour
                    
                    minutes_to_wait = hours_to_wait * 60
                    logger.info(f"üò¥ –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞. –ñ–¥–µ–º {hours_to_wait} —á–∞—Å–æ–≤ –¥–æ 06:00...")
                    await asyncio.sleep(minutes_to_wait * 60)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    logger.info("üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–û–í–û–°–¢–ù–û–ì–û –ë–û–¢–ê")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == 'test':
            scheduler = NewsScheduler()
            scheduler.test_schedule()
            return
        elif sys.argv[1] == 'simple':
            logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
            simple_scheduler = SimpleScheduler()
            asyncio.run(simple_scheduler.run_continuous())
            return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        scheduler = NewsScheduler()
        scheduler.start_scheduler()
    except ImportError:
        logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å schedule –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        simple_scheduler = SimpleScheduler()
        asyncio.run(simple_scheduler.run_continuous())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        simple_scheduler = SimpleScheduler()
        asyncio.run(simple_scheduler.run_continuous())


if __name__ == "__main__":
    main()