import asyncio
import schedule
import time
import subprocess
import sys
from datetime import datetime, time as dt_time
from zoneinfo import ZoneInfo
import logging

# –ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
KIEV_TZ = ZoneInfo("Europe/Kiev")

def now_kiev() -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–∏–µ–≤–µ"""
    return datetime.now(KIEV_TZ)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scheduler.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class NewsScheduler:
    def __init__(self):
        # –í–ê–ñ–ù–û: –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –ø–æ –∫–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        self.working_hours_start = dt_time(6, 0)   # 6:00 –ø–æ –ö–∏–µ–≤—É
        self.working_hours_end = dt_time(1, 0)     # 1:00 –ø–æ –ö–∏–µ–≤—É (—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
        self.interval_minutes = 20
        self.is_running = False
    
    def is_working_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –ø–æ –∫–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
        current_time_kiev = now_kiev()
        current_hour = current_time_kiev.hour
        
        logger.info(f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ö–∏–µ–≤): {current_time_kiev.strftime('%H:%M:%S %d.%m.%Y')}")
        
        # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: —Å 6:00 –¥–æ 01:00 (—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
        # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ù–ï —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: —Å 01:00 –¥–æ 06:00
        if 1 <= current_hour < 6:  # —Å 01:00 –¥–æ 06:00 - –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞
            logger.info(f"‚è∞ –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞: {current_hour}:xx (01:00-06:00). –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            return False
        else:
            logger.info(f"‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {current_hour}:xx")
            return True
    
    def run_main_bot(self):
        if not self.is_working_hours():
            logger.info("‚è∞ –°–µ–π—á–∞—Å –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ (01:00-06:00 –ø–æ –ö–∏–µ–≤—É). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")
            return
        
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")
            return
        
        self.is_running = True
        current_time_kiev = now_kiev()
        current_time_str = current_time_kiev.strftime('%H:%M:%S %d.%m.%Y')
        
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ {current_time_str} (–ö–∏–µ–≤)")
            result = subprocess.run(
                [sys.executable, 'main.py'],
                capture_output=True,
                text=True,
                encoding='utf-8',
                timeout=600  # 10 –º–∏–Ω—É—Ç
            )
            if result.returncode == 0:
                logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                if result.stdout:
                    important_lines = [
                        line for line in result.stdout.split('\n') 
                        if any(keyword in line for keyword in ['‚úÖ', '‚ùå', 'üö´', 'üì¢', 'üìä'])
                    ]
                    for line in important_lines[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                        if line.strip():
                            logger.info(f"   {line.strip()}")
            else:
                logger.error(f"‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
                if result.stderr:
                    logger.error(f"–û—à–∏–±–∫–∞: {result.stderr}")
                if result.stdout:
                    logger.error(f"
