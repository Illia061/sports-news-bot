import os
import sys
from datetime import datetime
from parser import get_latest_news
from ai_processor import process_article_for_posting, has_openai_key

try:
    from telegram_poster import TelegramPosterSync
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

def main():
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞")

    news_list = get_latest_news()
    if not news_list:
        print("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")

    processed_articles = []
    for article in news_list:
        try:
            processed_article = process_article_for_posting(article)
        except Exception:
            processed_article = {
                'title': article.get('title', ''),
                'post_text': article.get('title', ''),
                'image_path': '',
                'image_url': article.get('image_url', ''),
                'url': article.get('link', ''),
                'summary': article.get('summary', '')
            }
        processed_articles.append(processed_article)

    if TELEGRAM_AVAILABLE:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        channel_id = os.getenv('TELEGRAM_CHANNEL_ID')

        if bot_token and channel_id:
            try:
                poster = TelegramPosterSync()
                if poster.test_connection():
                    poster.post_articles(processed_articles, delay=3)
                    print("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        else:
            print("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHANNEL_ID")
    else:
        print("‚ö†Ô∏è  telegram_poster.py –Ω–µ –Ω–∞–π–¥–µ–Ω - Telegram –æ—Ç–∫–ª—é—á–µ–Ω")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1)
