#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from datetime import datetime
from zoneinfo import ZoneInfo
import asyncio
import logging
from parser import get_latest_news
from ai_processor import process_article_for_posting, has_gemini_key
from ai_content_checker import check_content_similarity
from db import get_last_run_time, update_last_run_time, is_already_posted, save_posted, cleanup_old_posts, debug_db_state, now_kiev, format_kiev_time, to_kiev_time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'POST_TIMEOUT': 30,
    'POST_INTERVAL': 3,
    'CLEANUP_DAYS': 7,
    'WORKING_HOURS': (6, 1)  # —Å 06:00 –¥–æ 01:00
}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
try:
    from telegram_bot import TelegramPosterSync, debug_environment
    TELEGRAM_AVAILABLE = True
except ImportError:
    logger.warning("–ú–æ–¥—É–ª—å telegram_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    TELEGRAM_AVAILABLE = False

KIEV_TZ = ZoneInfo("Europe/Kiev")

def check_telegram_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram."""
    if not TELEGRAM_AVAILABLE:
        logger.error("–ú–æ–¥—É–ª—å Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    return debug_environment()

async def post_with_timeout(poster, article, timeout=CONFIG['POST_TIMEOUT']):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
    try:
        async with asyncio.timeout(timeout):
            return await asyncio.to_thread(poster.post_article, article)
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article.get('title', '')[:60]}...")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π Football.ua")
    
    current_time_kiev = now_kiev()
    current_hour = current_time_kiev.hour
    
    if not (CONFIG['WORKING_HOURS'][0] <= current_hour or current_hour <= CONFIG['WORKING_HOURS'][1]):
        logger.info(f"–í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ({current_hour}:00). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
        
    logger.info("=" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    logger.info("–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
    last_run_time = get_last_run_time()
    
    logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {format_kiev_time(last_run_time)} (–ö–∏–µ–≤)")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {format_kiev_time(current_time_kiev)} (–ö–∏–µ–≤)")
    logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {(current_time_kiev - to_kiev_time(last_run_time)).total_seconds() / 60:.1f} –º–∏–Ω—É—Ç")
    
    debug_db_state()
    filter_time = last_run_time
    update_last_run_time()
    cleanup_old_posts(days=CONFIG['CLEANUP_DAYS'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    if has_gemini_key():
        logger.info("Gemini API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI —Ä–µ–∑—é–º–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    else:
        logger.warning("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—é–º–µ")
    
    telegram_enabled = check_telegram_config()
    logger.info(f"Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if telegram_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    
    logger.info("-" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ Football.ua
    all_news = []
    
    logger.info(f"–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ Football.ua —Å {format_kiev_time(filter_time)} (–ö–∏–µ–≤)...")
    try:
        football_ua_news = await asyncio.to_thread(get_latest_news, since_time=filter_time)
        if football_ua_news:
            logger.info(f"Football.ua: –Ω–∞–π–¥–µ–Ω–æ {len(football_ua_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            for news in football_ua_news:
                news['source'] = 'Football.ua'
            all_news.extend(football_ua_news)
        else:
            logger.info("Football.ua: –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Football.ua: {e}")
    
    if not all_news:
        logger.info("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    sources_stats = {}
    for article in all_news:
        source = article.get('source', 'Unknown')
        sources_stats[source] = sources_stats.get(source, 0) + 1
    
    logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
    for source, count in sources_stats.items():
        logger.info(f"   {source}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
    logger.info("–§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    filtered_news = [
        article for article in all_news
        if not is_already_posted(article.get('title', ''))
    ]
    
    for article in all_news:
        source = article.get('source', 'Unknown')
        title = article.get('title', '')[:50]
        time_str = format_kiev_time(article.get('publish_time')) if article.get('publish_time') else '–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        status = '–ù–æ–≤–∞—è' if article in filtered_news else '–£–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞'
        logger.info(f"{status} ({source}): {title}... ({time_str})")
    
    if not filtered_news:
        logger.info("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
        return
    
    logger.info(f"–ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(filtered_news)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    filtered_news.sort(key=lambda x: x.get('publish_time') or datetime.min.replace(tzinfo=KIEV_TZ), reverse=True)
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    processed_articles = await asyncio.gather(
        *[asyncio.to_thread(process_article_for_posting, article) for article in filtered_news],
        return_exceptions=True
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    valid_articles = []
    for i, result in enumerate(processed_articles, 1):
        if isinstance(result, Exception):
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {i}: {result}")
            continue
        valid_articles.append(result)
        source = result.get('source', 'Unknown')
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ [{source}]: {result.get('title', '')[:50]}...")
        if result.get('image_path'):
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(result['image_path'])}")
    
    # –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    logger.info("=" * 70)
    logger.info("–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ù–û–í–û–°–¢–ò")
    logger.info("=" * 70)
    
    for i, article in enumerate(valid_articles, 1):
        source = article.get('source', 'Unknown')
        logger.info(f"–ù–û–í–û–°–¢–¨ {i} [{source}]")
        logger.info("-" * 50)
        logger.info(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n{article.get('post_text', article.get('title', ''))}")
        
        if article.get('image_path'):
            image_info = f"‚úÖ {os.path.basename(article['image_path'])}"
        elif article.get('image_url'):
            image_info = f"üîó {article.get('image_url', '')[:50]}..."
        else:
            image_info = "‚ùå"
        
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_info}")
        logger.info("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è scope
    articles_to_publish = []
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    if telegram_enabled and valid_articles:
        logger.info("–ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´ –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø")
        logger.info("=" * 70)
        
        articles_to_publish = [
            article for article in valid_articles
            if not check_content_similarity(article, threshold=0.7)
        ]
        
        for i, article in enumerate(valid_articles, 1):
            source = article.get('source', 'Unknown')
            title = article.get('title', '')[:50]
            status = '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' if article in articles_to_publish else '–î—É–±–ª–∏–∫–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω'
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}/{len(valid_articles)} [{source}]: {title}...")
            logger.info(f"{status}")
        
        if articles_to_publish:
            logger.info("–ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM")
            logger.info("=" * 70)
            
            try:
                poster = TelegramPosterSync()
                if poster.test_connection():
                    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")
                    
                    successful_posts = 0
                    for i, article in enumerate(articles_to_publish, 1):
                        source = article.get('source', 'Unknown')
                        logger.info(f"–ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}/{len(articles_to_publish)} [{source}]...")
                        if await post_with_timeout(poster, article):
                            successful_posts += 1
                            save_posted(article.get('title', ''))
                            logger.info("–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                        else:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
                        
                        if i < len(articles_to_publish):
                            await asyncio.sleep(CONFIG['POST_INTERVAL'])
                    
                    logger.info(f"–ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {successful_posts}/{len(articles_to_publish)} —É—Å–ø–µ—à–Ω–æ")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
                    published_sources = {}
                    for article in articles_to_publish[:successful_posts]:
                        source = article.get('source', 'Unknown')
                        published_sources[source] = published_sources.get(source, 0) + 1
                    
                    logger.info("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
                    for source, count in published_sources.items():
                        logger.info(f"   {source}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π")
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}", exc_info=True)
        else:
            logger.info("–ù–ï–¢ –ù–û–í–û–°–¢–ï–ô –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò: –≤—Å–µ —è–≤–ª—è—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏")
    
    else:
        logger.info("–ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM –û–¢–ö–õ–Æ–ß–ï–ù–ê")
        if not telegram_enabled:
            logger.info("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        if not valid_articles:
            logger.info("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try:
        import json
        output_data = {
            'timestamp': current_time_kiev.isoformat(),
            'last_run_time': filter_time.isoformat() if filter_time else None,
            'timezone': 'Europe/Kiev',
            'sources_found': sources_stats,
            'total_new_articles': len(filtered_news),
            'total_processed': len(valid_articles),
            'articles_to_publish': len(articles_to_publish),
            'telegram_enabled': telegram_enabled,
            'articles': valid_articles
        }
        with open('processed_news.json', 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ processed_news.json")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("=" * 70)
    logger.info("–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    logger.info("=" * 70)
    logger.info(f"–§–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏: —Å {format_kiev_time(filter_time)} (–ö–∏–µ–≤)")
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö: {len(all_news)}")
    logger.info("–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
    for source, count in sources_stats.items():
        logger.info(f"   - {source}: {count}")
    logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(filtered_news)}")
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(valid_articles)}")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã: {'–î–∞' if telegram_enabled else '–ù–µ—Ç'}")
    logger.info(f"–ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(articles_to_publish) if telegram_enabled else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    logger.info(f"–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {sum(1 for a in valid_articles if a.get('image_path') or a.get('image_url'))}")
    logger.info(f"–° AI —Ä–µ–∑—é–º–µ: {'–î–∞' if has_gemini_key() else '–ù–µ—Ç'}")
    logger.info("BeSoccer –ø–∞—Ä—Å–µ—Ä: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    logger.info(f"Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if telegram_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {format_kiev_time(current_time_kiev)} (–ö–∏–µ–≤)")
    logger.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
