#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from datetime import datetime
from parser import get_latest_news
from ai_processor import process_article_for_posting, has_gemini_key
from ai_content_checker import check_content_similarity
from db import get_last_run_time, update_last_run_time, is_already_posted, save_posted, cleanup_old_posts, debug_db_state
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à Telegram –º–æ–¥—É–ª—å
try:
    from telegram_bot import TelegramPosterSync, debug_environment
    TELEGRAM_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è telegram_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    TELEGRAM_AVAILABLE = False

def check_telegram_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram"""
    if not TELEGRAM_AVAILABLE:
        print("‚ùå Telegram –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    print("üîß –ü–†–û–í–ï–†–ö–ê TELEGRAM –ù–ê–°–¢–†–û–ï–ö:")
    return debug_environment()

async def post_with_timeout(poster, article, timeout=30):
    """–ü–æ—Å—Ç–∏–Ω–≥ —Å—Ç–∞—Ç—å–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        async with asyncio.timeout(timeout):
            return await asyncio.to_thread(poster.post_article, article)
    except asyncio.TimeoutError:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article.get('title', '')[:60]}...")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π Football.ua")
    
    current_hour = datetime.now().hour
    if not (6 <= current_hour or current_hour <= 1):  # —Å 06:00 –¥–æ 01:00
        print(f"‚è∞ –°–µ–π—á–∞—Å {current_hour}:00 ‚Äî –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        return
        
    print("=" * 70)
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    print("üïí –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
    last_run_time = get_last_run_time()
    current_time = datetime.now()
    
    print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_run_time.strftime('%H:%M %d.%m.%Y')}")
    print(f"üìä –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}")
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: {(current_time - last_run_time).total_seconds() / 60:.1f} –º–∏–Ω—É—Ç")
    
    # –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
    debug_db_state()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –≤ –Ω–∞—á–∞–ª–µ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    filter_time = last_run_time
    update_last_run_time()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    cleanup_old_posts(days=7)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # Gemini
    if has_gemini_key():
        print("‚úÖ Gemini API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI —Ä–µ–∑—é–º–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    else:
        print("‚ö†Ô∏è Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—é–º–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    
    # Telegram - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    telegram_enabled = check_telegram_config()
    
    if telegram_enabled:
        print("‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª")
    else:
        print("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    print("-" * 70)
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    print(f"\nüîç –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å {filter_time.strftime('%H:%M %d.%m.%Y')}...")
    news_list = get_latest_news(since_time=filter_time)
    
    if not news_list:
        print("üì≠ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print(f"üí° –ü—Ä–æ–≤–µ—Ä–∏–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç (—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫)")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
    print("\nüîç –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    filtered_news = []
    
    for article in news_list:
        title = article.get('title', '')
        if not is_already_posted(title):
            filtered_news.append(article)
            print(f"‚úÖ –ù–æ–≤–∞—è: {title[:60]}...")
        else:
            print(f"üö´ –£–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title[:60]}...")
    
    if not filtered_news:
        print("üì≠ –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.")
        return
    
    print(f"‚úÖ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(filtered_news)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å
    print("\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    processed_articles = []
    
    for i, article in enumerate(filtered_news, 1):
        print(f"\nüìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}/{len(filtered_news)}:")
        print(f"   {article.get('title', '')[:60]}...")
        
        try:
            processed_article = process_article_for_posting(article)
            processed_articles.append(processed_article)
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            if processed_article.get('image_path'):
                print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(processed_article['image_path'])}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            processed_articles.append({
                'title': article.get('title', ''),
                'post_text': f"‚öΩ {article.get('title', '')}\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏",
                'image_path': '',
                'image_url': article.get('image_url', ''),
                'url': article.get('link', ''),
                'summary': article.get('summary', '')
            })
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    print("\n" + "=" * 70)
    print("üì∞ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ù–û–í–´–ï –ù–û–í–û–°–¢–ò")
    print("=" * 70)
    
    for i, article in enumerate(processed_articles, 1):
        print(f"\nüìå –ù–û–í–û–°–¢–¨ {i}")
        print("-" * 50)
        print("üìù –¢–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        print(article.get('post_text', article.get('title', '')))
        
        if article.get('image_path'):
            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ {os.path.basename(article['image_path'])}")
        elif article.get('image_url'):
            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: üîó {article['image_url'][:50]}...")
        else:
            print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå")
        
        print("=" * 50)
    
    # –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É–±–ª–∏–∫—É–µ–º –∏—Ö
    if telegram_enabled and processed_articles:
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´ –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø")
        print("=" * 70)
        
        articles_to_publish = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        for i, article in enumerate(processed_articles, 1):
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}/{len(processed_articles)} –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...")
            print(f"   üì∞ {article.get('title', '')[:60]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            is_duplicate = check_content_similarity(article, threshold=0.7)
            
            if is_duplicate:
                print(f"üö´ –î–£–ë–õ–Ü–ö–ê–¢ –û–ë–ù–ê–†–£–ñ–ï–ù - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
            else:
                print(f"‚úÖ –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                articles_to_publish.append(article)
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
        if articles_to_publish:
            print(f"\nüì¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM")
            print("=" * 70)
            
            try:
                poster = TelegramPosterSync()
                print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
                if poster.test_connection():
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                    
                    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é {len(articles_to_publish)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
                    successful_posts = 0
                    
                    for i, article in enumerate(articles_to_publish, 1):
                        print(f"\nüì§ –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}/{len(articles_to_publish)}...")
                        if await post_with_timeout(poster, article):
                            successful_posts += 1
                            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
                            title = article.get('title', '')
                            if title:
                                save_posted(title)
                                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {title[:50]}...")
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                        if i < len(articles_to_publish):
                            await asyncio.sleep(3)
                    
                    print(f"\nüéâ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {successful_posts}/{len(articles_to_publish)}")
                    
                    if successful_posts < len(articles_to_publish):
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {len(articles_to_publish) - successful_posts}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
                import traceback
                print("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
                traceback.print_exc()
        else:
            print(f"\nüö´ –ù–ï–¢ –ù–û–í–û–°–¢–ï–ô –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
            print("üìã –í—Å–µ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ")
    
    elif not telegram_enabled:
        print(f"\nüì¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM –û–¢–ö–õ–Æ–ß–ï–ù–ê")
        print("üìã –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ Railway:")
        print("   - TELEGRAM_BOT_TOKEN")
        print("   - TELEGRAM_CHANNEL_ID")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π –Ω–∞ Railway")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        import json
        output_data = {
            'timestamp': datetime.now().isoformat(),
            'last_run_time': filter_time.isoformat(),
            'total_new_articles': len(filtered_news),
            'total_processed': len(processed_articles),
            'articles_to_publish': len(articles_to_publish) if telegram_enabled and 'articles_to_publish' in locals() else 0,
            'telegram_enabled': telegram_enabled,
            'articles': processed_articles
        }
        with open('processed_news.json', 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ processed_news.json")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üïí –§–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏: —Å {filter_time.strftime('%H:%M %d.%m')}")
    print(f"   üì∞ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö: {len(news_list)}")
    print(f"   üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ë–î: {len(filtered_news)}")
    print(f"   üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_articles)}")
    print(f"   üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {'–î–∞' if telegram_enabled else '–ù–µ—Ç'}")
    print(f"   üì¢ –ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(articles_to_publish) if telegram_enabled and 'articles_to_publish' in locals() else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    print(f"   üñºÔ∏è –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {sum(1 for a in processed_articles if a.get('image_path') or a.get('image_url'))}")
    print(f"   ü§ñ –° AI —Ä–µ–∑—é–º–µ: {'–î–∞' if has_gemini_key() else '–ù–µ—Ç'}")
    print(f"   üì¢ Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if telegram_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    
    print(f"\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
