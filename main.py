#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from datetime import datetime
from parser import get_latest_news
from ai_processor import process_article_for_posting, has_openai_key

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telegram –ø–æ—Å—Ç–µ—Ä
try:
    from telegram_poster import TelegramPosterSync
    TELEGRAM_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  telegram_poster.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    TELEGRAM_AVAILABLE = False

def check_telegram_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram"""
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
    
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export TELEGRAM_BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'")
        return False
    
    if not channel_id:
        print("‚ùå TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω") 
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export TELEGRAM_CHANNEL_ID='@–≤–∞—à_–∫–∞–Ω–∞–ª'")
        return False
    
    return True

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π Football.ua")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # OpenAI
    if has_openai_key():
        print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI —Ä–µ–∑—é–º–µ")
    else:
        print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—é–º–µ")
    
    # Telegram
    telegram_enabled = False
    if TELEGRAM_AVAILABLE:
        if check_telegram_config():
            print("‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª")
            telegram_enabled = True
        else:
            print("‚ö†Ô∏è  Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    else:
        print("‚ö†Ô∏è  Telegram –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    print("-" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    print("\nüîç –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–ª–æ–∫–∞ '–ì–û–õ–û–í–ù–ï –ó–ê –î–û–ë–£'...")
    news_list = get_latest_news()
    
    if not news_list:
        print("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞.")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å
    print("\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    processed_articles = []
    
    for i, article in enumerate(news_list, 1):
        print(f"\nüìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}/{len(news_list)}:")
        print(f"   {article.get('title', '')[:60]}...")
        
        try:
            # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏
            processed_article = process_article_for_posting(article)
            processed_articles.append(processed_article)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            if processed_article['image_path']:
                print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(processed_article['image_path'])}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            processed_articles.append({
                'title': article.get('title', ''),
                'post_text': f"‚öΩ {article.get('title', '')}\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏",
                'image_path': '',
                'image_url': article.get('image_url', ''),
                'url': article.get('link', ''),
                'summary': article.get('summary', '')
            })
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    print("\n" + "=" * 70)
    print("üì∞ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ù–û–í–û–°–¢–ò")
    print("=" * 70)
    
    for i, article in enumerate(processed_articles, 1):
        print(f"\nüìå –ù–û–í–û–°–¢–¨ {i}")
        print("-" * 50)
        print("üìù –¢–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        print(article['post_text'])
        
        if article['image_path']:
            print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ {os.path.basename(article['image_path'])}")
        elif article['image_url']:
            print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: üîó {article['image_url'][:50]}...")
        else:
            print("üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå")
        
        print("=" * 50)
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    if telegram_enabled and processed_articles:
        print(f"\nüì¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM")
        print("=" * 70)
        
        try:
            poster = TelegramPosterSync()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
            if poster.test_connection():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                print(f"\n‚ùì –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {len(processed_articles)} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª?")
                print("   –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–≤–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
                
                user_input = input("   –í–∞—à –≤—ã–±–æ—Ä: ").lower().strip()
                
                if user_input in ['–¥–∞', 'yes', 'y', '–¥']:
                    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é...")
                    
                    # –ü—É–±–ª–∏–∫—É–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                    successful_posts = poster.post_articles(processed_articles, delay=3)
                    
                    print(f"\nüéâ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {successful_posts}/{len(processed_articles)}")
                    
                    if successful_posts < len(processed_articles):
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {len(processed_articles) - successful_posts}")
                else:
                    print("‚èπÔ∏è  –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
    
    elif not telegram_enabled:
        print(f"\nüì¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM –û–¢–ö–õ–Æ–ß–ï–ù–ê")
        print("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export TELEGRAM_BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        print("export TELEGRAM_CHANNEL_ID='@–≤–∞—à_–∫–∞–Ω–∞–ª'")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        import json
        
        output_data = {
            'timestamp': datetime.now().isoformat(),
            'total_articles': len(processed_articles),
            'telegram_enabled': telegram_enabled,
            'articles': processed_articles
        }
        
        with open('processed_news.json', 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ processed_news.json")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üì∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(processed_articles)}")
    print(f"   üñºÔ∏è  –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {sum(1 for a in processed_articles if a['image_path'] or a['image_url'])}")
    print(f"   ü§ñ –° AI —Ä–µ–∑—é–º–µ: {'–î–∞' if has_openai_key() else '–ù–µ—Ç'}")
    print(f"   üì¢ Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if telegram_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    
    print(f"\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def cleanup_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        import glob
        import time
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_dir = "images"
        if os.path.exists(images_dir):
            current_time = time.time()
            deleted_count = 0
            
            for filepath in glob.glob(os.path.join(images_dir, "*")):
                if os.path.isfile(filepath):
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤
                    if current_time - os.path.getctime(filepath) > 48 * 3600:
                        os.remove(filepath)
                        deleted_count += 1
            
            if deleted_count > 0:
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ JSON —Ñ–∞–π–ª—ã
        for old_json in glob.glob("processed_news_*.json"):
            try:
                file_time = os.path.getctime(old_json)
                if time.time() - file_time > 7 * 24 * 3600:  # 7 –¥–Ω–µ–π
                    os.remove(old_json)
            except:
                pass
                
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")

if __name__ == "__main__":
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        cleanup_old_files()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
        main()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
