#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from datetime import datetime
from parser import get_latest_news
from ai_processor import process_article_for_posting, has_gemini_key
from content_checker import check_content_similarity
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à Telegram –º–æ–¥—É–ª—å
try:
    from telegram_bot import TelegramPosterSync, debug_environment
    TELEGRAM_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è telegram_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    TELEGRAM_AVAILABLE = False

def check_telegram_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram"""
    if not TELEGRAM_AVAILABLE:
        print("‚ùå Telegram –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    print("üîß –ü–†–û–í–ï–†–ö–ê TELEGRAM –ù–ê–°–¢–†–û–ï–ö:")
    return debug_environment()

async def post_with_timeout(poster, article, timeout=30):
    """–ü–æ—Å—Ç–∏–Ω–≥ —Å—Ç–∞—Ç—å–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        async with asyncio.timeout(timeout):
            return await asyncio.to_thread(poster.post_article, article)
    except asyncio.TimeoutError:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article.get('title', '')[:60]}...")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π Football.ua")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # Gemini AI
    if has_gemini_key():
        print("‚úÖ Gemini API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI —Ä–µ–∑—é–º–µ")
    else:
        print("‚ö†Ô∏è Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—é–º–µ")
    
    # Telegram - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    telegram_enabled = check_telegram_config()
    
    if telegram_enabled:
        print("‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª")
    else:
        print("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    print("-" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    print("\nüîç –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–ª–æ–∫–∞ '–ì–û–õ–û–í–ù–ï –ó–ê –î–û–ë–£'...")
    news_list = get_latest_news()
    
    if not news_list:
        print("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞.")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï–î–ù–Æ–Æ –Ω–æ–≤–æ—Å—Ç—å
    latest_article = news_list[0]  # –°–∞–º–∞—è —Å–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å
    print(f"üì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å: {latest_article.get('title', '')[:60]}...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
    try:
        processed_article = process_article_for_posting(latest_article)
        print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        if processed_article.get('image_path'):
            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(processed_article['image_path'])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        processed_article = {
            'title': latest_article.get('title', ''),
            'post_text': f"‚öΩ {latest_article.get('title', '')}\n\n#—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏",
            'image_path': '',
            'image_url': latest_article.get('image_url', ''),
            'url': latest_article.get('link', ''),
            'summary': latest_article.get('summary', '')
        }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
    print("\n" + "=" * 70)
    print("üì∞ –û–ë–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –ù–û–í–û–°–¢–¨")
    print("=" * 70)
    print("üìù –¢–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    print(processed_article.get('post_text', processed_article.get('title', '')))
    
    if processed_article.get('image_path'):
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ {os.path.basename(processed_article['image_path'])}")
    elif processed_article.get('image_url'):
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: üîó {processed_article['image_url'][:50]}...")
    else:
        print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå")
    
    print("=" * 70)
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç—å —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´")
    print("=" * 70)
    
    try:
        is_duplicate = check_content_similarity(processed_article, threshold=0.7)
        
        if is_duplicate:
            print("üö´ –ü–†–û–ü–£–°–ö–ê–ï–ú: –ù–æ–≤–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∞ –Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ")
            print("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –¥—É–±–ª–∏–∫–∞—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            return
        else:
            print("‚úÖ –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢: –ú–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        print("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏)")
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    if telegram_enabled:
        print(f"\nüì¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM")
        print("=" * 70)
        
        try:
            poster = TelegramPosterSync()
            print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
            
            if poster.test_connection():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                
                print(f"\nüöÄ –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å...")
                success = await post_with_timeout(poster, processed_article)
                
                if success:
                    print(f"‚úÖ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û!")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
                    try:
                        import json
                        publish_log = {
                            'timestamp': datetime.now().isoformat(),
                            'title': processed_article.get('title', ''),
                            'url': processed_article.get('url', ''),
                            'success': True
                        }
                        
                        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        log_file = 'publish_log.json'
                        try:
                            with open(log_file, 'r', encoding='utf-8') as f:
                                log_data = json.load(f)
                                if not isinstance(log_data, list):
                                    log_data = []
                        except:
                            log_data = []
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        log_data.append(publish_log)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
                        log_data = log_data[-50:]
                        
                        with open(log_file, 'w', encoding='utf-8') as f:
                            json.dump(log_data, f, ensure_ascii=False, indent=2)
                        
                        print(f"üìù –ó–∞–ø–∏—Å—å –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {log_file}")
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                        
                else:
                    print(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–ü–£–ë–õ–ò–ö–û–í–ê–¢–¨")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
            import traceback
            print("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
    
    elif not telegram_enabled:
        print(f"\nüì¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í TELEGRAM –û–¢–ö–õ–Æ–ß–ï–ù–ê")
        print("üìã –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ Railway:")
        print("   - TELEGRAM_BOT_TOKEN")
        print("   - TELEGRAM_CHANNEL_ID")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π –Ω–∞ Railway")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        import json
        output_data = {
            'timestamp': datetime.now().isoformat(),
            'processed_article': processed_article,
            'telegram_enabled': telegram_enabled,
            'duplicate_check_performed': True
        }
        with open('last_processed_news.json', 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ last_processed_news.json")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üì∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–ª–æ–∫–∞ '–ì–û–õ–û–í–ù–ï –ó–ê –î–û–ë–£'")
    print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã: –í—ã–ø–æ–ª–Ω–µ–Ω–∞")
    print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if processed_article.get('image_path') or processed_article.get('image_url') else '–ù–µ—Ç'}")
    print(f"   ü§ñ AI —Ä–µ–∑—é–º–µ: {'–î–∞' if has_gemini_key() else '–ù–µ—Ç'}")
    print(f"   üì¢ Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if telegram_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    
    print(f"\n‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
