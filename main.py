#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import os
import sys
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from parser import get_latest_news as get_football_ua_news
from onefootball_parser import get_latest_news as get_onefootball_news
from ai_processor import process_article_for_posting, has_gemini_key
from ai_content_checker import check_content_similarity, check_articles_similarity
from db import (
    get_last_run_time,
    update_last_run_time,
    is_already_posted,
    save_posted,
    cleanup_old_posts,
    now_kiev,
    format_kiev_time,
    to_kiev_time,
)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

CONFIG = {
    'POST_TIMEOUT': 30,
    'POST_INTERVAL': 3,
    'CLEANUP_DAYS': 7,
    'WORKING_HOURS': (6, 1),
    'SIMILARITY_THRESHOLD': 0.7,
}

try:
    from telegram_bot import TelegramPosterSync, debug_environment
    TELEGRAM_AVAILABLE = True
except ImportError:
    logger.warning("–ú–æ–¥—É–ª—å telegram_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    TELEGRAM_AVAILABLE = False

KIEV_TZ = ZoneInfo("Europe/Kiev")

async def post_with_timeout(poster, article, timeout=CONFIG['POST_TIMEOUT']):
    """–ü—É–±–ª–∏–∫—É–µ—Ç —Å—Ç–∞—Ç—å—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
    try:
        async with asyncio.timeout(timeout):
            return await asyncio.to_thread(poster.post_article, article)
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article.get('title', '')[:50]}...")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

async def fetch_news(source_name, fetch_func, since_time):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ fetch_func –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
        if asyncio.iscoroutinefunction(fetch_func):
            news = await fetch_func(since_time=since_time)
        else:
            news = await asyncio.to_thread(fetch_func, since_time=since_time)
        if news:
            logger.info(f"{source_name}: –Ω–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            for item in news:
                item['source'] = source_name
        return news
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π {source_name}: {e}")
        return []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
    current_time_kiev = now_kiev()
    current_hour = current_time_kiev.hour

    if not (CONFIG['WORKING_HOURS'][0] <= current_hour or current_hour <= CONFIG['WORKING_HOURS'][1]):
        logger.info(f"–í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ({current_hour}:00). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    last_run_time = get_last_run_time()
    logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {format_kiev_time(last_run_time)}")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {format_kiev_time(current_time_kiev)}")

    update_last_run_time()
    cleanup_old_posts(days=CONFIG['CLEANUP_DAYS'])

    logger.info("Gemini API: " + ("–≤–∫–ª—é—á—ë–Ω" if has_gemini_key() else "–æ—Ç–∫–ª—é—á—ë–Ω"))
    telegram_enabled = TELEGRAM_AVAILABLE and debug_environment()
    logger.info(f"Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–≤–∫–ª—é—á–µ–Ω–∞' if telegram_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    all_news = []
    sources = [
        ("Football.ua", get_football_ua_news),
        ("OneFootball", get_onefootball_news),
    ]

    for source_name, fetch_func in sources:
        news = await fetch_news(source_name, fetch_func, last_run_time)
        all_news.extend(news)

    if not all_news:
        logger.info("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    sources_stats = {article.get('source', 'Unknown'): 0 for article in all_news}
    for article in all_news:
        sources_stats[article.get('source', 'Unknown')] += 1

    logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
    for source, count in sources_stats.items():
        logger.info(f"   {source}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
    filtered_news = [article for article in all_news if not is_already_posted(article.get('title', ''))]
    if not filtered_news:
        logger.info("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
        return

    logger.info(f"–ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(filtered_news)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
    filtered_news.sort(key=lambda x: x.get('publish_time') or datetime.min.replace(tzinfo=KIEV_TZ), reverse=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    logger.info("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI...")
    processed_articles = await asyncio.gather(
        *[asyncio.to_thread(process_article_for_posting, article) for article in filtered_news],
        return_exceptions=True
    )

    valid_articles = [result for result in processed_articles if not isinstance(result, Exception)]
    for i, result in enumerate(valid_articles, 1):
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ [{result.get('source')}]: {result.get('title', '')[:50]}...")

    if not valid_articles:
        logger.info("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—å–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã...")
    unique_articles = check_articles_similarity(valid_articles, CONFIG['SIMILARITY_THRESHOLD'])
    
    if len(unique_articles) < len(valid_articles):
        removed_count = len(valid_articles) - len(unique_articles)
        logger.info(f"üìä –£–¥–∞–ª–µ–Ω–æ {removed_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–º...")
    today_start = current_time_kiev.replace(hour=0, minute=0, second=0, microsecond=0)
    articles_to_publish = []
    
    for article in unique_articles:
        is_duplicate = check_content_similarity(
            article, 
            threshold=CONFIG['SIMILARITY_THRESHOLD'], 
            since_time=today_start
        )
        
        if not is_duplicate:
            articles_to_publish.append(article)
        else:
            logger.info(f"üö´ –î—É–±–ª–∏–∫–∞—Ç —Å –∫–∞–Ω–∞–ª–æ–º: {article.get('title', '')[:50]}...")

    if not articles_to_publish:
        logger.info("–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        return

    logger.info(f"üì∞ –ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(articles_to_publish)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    sources_to_publish = {}
    for article in articles_to_publish:
        source = article.get('source', 'Unknown')
        sources_to_publish[source] = sources_to_publish.get(source, 0) + 1
    
    logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    for source, count in sources_to_publish.items():
        logger.info(f"   {source}: {count} —Å—Ç–∞—Ç–µ–π")

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    if telegram_enabled and articles_to_publish:
        logger.info("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram")
        try:
            poster = TelegramPosterSync()
            if poster.test_connection():
                successful_posts = 0
                for i, article in enumerate(articles_to_publish):
                    logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º [{article.get('source')}] {i+1}/{len(articles_to_publish)}: {article.get('title', '')[:50]}...")
                    
                    if await post_with_timeout(poster, article):
                        successful_posts += 1
                        save_posted(article.get('title', ''))
                        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                        
                        if i < len(articles_to_publish) - 1:
                            logger.info(f"‚è≥ –ü–∞—É–∑–∞ {CONFIG['POST_INTERVAL']} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(CONFIG['POST_INTERVAL'])
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
                
                logger.info(f"üìä –ò—Ç–æ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {successful_posts}/{len(articles_to_publish)}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    else:
        if not telegram_enabled:
            logger.info("üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        if not articles_to_publish:
            logger.info("üì≠ –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    output_data = {
        'timestamp': current_time_kiev.isoformat(),
        'last_run_time': last_run_time.isoformat() if last_run_time else None,
        'sources_found': sources_stats,
        'total_new_articles': len(filtered_news),
        'total_processed': len(valid_articles),
        'unique_articles': len(unique_articles),
        'articles_to_publish': len(articles_to_publish),
        'sources_to_publish': sources_to_publish,
        'duplicate_removal': {
            'internal_duplicates_removed': len(valid_articles) - len(unique_articles),
            'channel_duplicates_removed': len(unique_articles) - len(articles_to_publish)
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ë–î (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ db.py)
    try:
        from db import save_statistics
        save_statistics(output_data)
        logger.info("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except ImportError:
        logger.warning("–§—É–Ω–∫—Ü–∏—è save_statistics –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ db.py")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    try:
        import json
        with open('processed_news.json', 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ processed_news.json")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    logger.info("="*60)
    logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    logger.info(f"   üì• –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(all_news)}")
    logger.info(f"   üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI: {len(valid_articles)}")
    logger.info(f"   üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(unique_articles)}")
    logger.info(f"   üì§ –ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(articles_to_publish)}")
    if telegram_enabled:
        logger.info(f"   ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {successful_posts if 'successful_posts' in locals() else 0}")
    logger.info("="*60)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
