import os
import requests
import time
from typing import List, Dict, Any

def debug_environment():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü–û–õ–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print("=" * 60)
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"–í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {len(os.environ)}")
    
    # Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    telegram_vars = {k: v for k, v in os.environ.items() if 'TELEGRAM' in k.upper()}
    print(f"\nüìã Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ({len(telegram_vars)}):")
    if telegram_vars:
        for key, value in telegram_vars.items():
            masked_value = value[:15] + "..." if len(value) > 15 else value
            print(f"   ‚úÖ {key} = {masked_value}")
    else:
        print("   ‚ùå –ù–ï–¢ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å TELEGRAM")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
    
    print(f"\nüîë TELEGRAM_BOT_TOKEN: {'‚úÖ –ù–ê–ô–î–ï–ù' if bot_token else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
    print(f"üì¢ TELEGRAM_CHANNEL_ID: {'‚úÖ –ù–ê–ô–î–ï–ù (' + channel_id + ')' if channel_id else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Railway)
    print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    other_vars = [k for k in os.environ.keys() if 'TELEGRAM' not in k.upper()][:5]
    for key in other_vars:
        value = os.environ[key]
        masked_value = value[:20] + "..." if len(value) > 20 else value
        print(f"   {key} = {masked_value}")
    
    print("=" * 60)
    
    return bool(bot_token and channel_id)

def send_message(text: str, parse_mode: str = "HTML") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª"""
    
    # –û—Ç–ª–∞–¥–∫–∞ —Å—Ä–µ–¥—ã
    env_ok = debug_environment()
    
    if not env_ok:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
    
    try:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': channel_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': False
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {channel_id}")
        
        response = requests.post(url, data=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            print(f"‚ùå –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {result}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def send_photo(photo_path: str, caption: str = "", parse_mode: str = "HTML") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"""
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
    
    if not bot_token or not channel_id:
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    if not os.path.exists(photo_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
        return False
    
    try:
        url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
        
        with open(photo_path, 'rb') as photo_file:
            files = {'photo': photo_file}
            data = {
                'chat_id': channel_id,
                'caption': caption,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, data=data, files=files, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                print(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {photo_path}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        return False

def send_photo_url(photo_url: str, caption: str = "", parse_mode: str = "HTML") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ URL"""
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
    
    if not bot_token or not channel_id:
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    try:
        url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
        data = {
            'chat_id': channel_id,
            'photo': photo_url,
            'caption': caption,
            'parse_mode': parse_mode
        }
        
        response = requests.post(url, data=data, timeout=30)
        result = response.json()
        
        if result.get('ok'):
            print(f"‚úÖ –§–æ—Ç–æ –ø–æ URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {photo_url}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ URL: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ URL: {e}")
        return False

def post_article(article: Dict[str, Any]) -> bool:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é"""
    try:
        print(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º: {article.get('title', '')[:50]}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
        message_text = article.get('post_text', '')
        if not message_text:
            title = article.get('title', '')
            summary = article.get('summary', '')
            message_text = f"<b>‚öΩ {title}</b>\n\n"
            if summary and summary != title:
                message_text += f"{summary}\n\n"
            message_text += "üè∑ #—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏ #—Å–ø–æ—Ä—Ç #football"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = article.get('image_path', '')
        image_url = article.get('image_url', '')
        
        success = False
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
        if image_path and os.path.exists(image_path):
            success = send_photo(image_path, message_text)
        
        # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ URL
        elif image_url:
            success = send_photo_url(image_url, message_text)
        
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if not success:
            print("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ñ–æ—Ç–æ)")
            success = send_message(message_text)
        
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return False

def post_articles(articles: List[Dict[str, Any]], delay: int = 3) -> int:
    """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    successful_posts = 0
    
    print(f"üì¢ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é {len(articles)} —Å—Ç–∞—Ç–µ–π")
    print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {delay} —Å–µ–∫—É–Ω–¥")
    print("=" * 60)
    
    for i, article in enumerate(articles, 1):
        print(f"\nüì§ –ü–æ—Å—Ç {i}/{len(articles)}")
        
        success = post_article(article)
        
        if success:
            successful_posts += 1
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if i < len(articles):
            print(f"‚è≥ –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ—Å—Ç–æ–º...")
            time.sleep(delay)
    
    print(f"\nüìä –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {successful_posts}/{len(articles)}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {len(articles) - successful_posts}")
    
    return successful_posts

def test_connection() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API"""
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            bot_info = result.get('result', {})
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
            print(f"ü§ñ –ë–æ—Ç: @{bot_info.get('username', 'unknown')}")
            print(f"üìã –ò–º—è: {bot_info.get('first_name', 'unknown')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å telegram_poster
class TelegramPosterSync:
    def __init__(self):
        pass
    
    def test_connection(self) -> bool:
        return test_connection()
    
    def post_articles(self, articles: List[Dict[str, Any]], delay: int = 3) -> int:
        return post_articles(articles, delay)
    
    def post_single_article(self, article: Dict[str, Any]) -> bool:
        return post_article(article)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ post_article
    def post_article(self, article: Dict[str, Any]) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é - –∞–ª–∏–∞—Å –¥–ª—è post_single_article"""
        return self.post_single_article(article)

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ë–û–¢–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É
    env_ok = debug_environment()
    
    if env_ok:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if test_connection():
            print("\nüß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            test_message = """<b>‚öΩ –¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞</b>

–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞

üè∑ #—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏ #—Å–ø–æ—Ä—Ç #football"""
            
            success = send_message(test_message)
            
            if success:
                print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
    else:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("\nüõ†Ô∏è  –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê RAILWAY:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç –Ω–∞ Railway")
        print("2. Variables ‚Üí Add Variable")
        print("3. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN")
        print("4. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_CHANNEL_ID")
        print("5. Redeploy –ø—Ä–æ–µ–∫—Ç")
