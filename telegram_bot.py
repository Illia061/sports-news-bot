
import os
import asyncio
import aiohttp
from typing import List, Dict, Any
import json
from urllib.parse import urlparse

class TelegramPoster:
    def __init__(self, bot_token: str = None, channel_id: str = None):
        self.bot_token = bot_token or os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = channel_id or os.getenv('TELEGRAM_CHANNEL_ID')
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        if not self.bot_token:
            raise ValueError("‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.channel_id:
            raise ValueError("‚ö†Ô∏è  TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    async def send_message(self, text: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                'chat_id': self.channel_id,
                'text': text,
                'parse_mode': parse_mode,
                'disable_web_page_preview': False
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_photo(self, photo_path: str, caption: str = "", parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞–Ω–∞–ª"""
        try:
            url = f"{self.api_url}/sendPhoto"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if not os.path.exists(photo_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                return False
            
            data = {
                'chat_id': self.channel_id,
                'caption': caption,
                'parse_mode': parse_mode
            }
            
            async with aiohttp.ClientSession() as session:
                with open(photo_path, 'rb') as photo_file:
                    files = {'photo': photo_file}
                    
                    async with session.post(url, data=data, files=files) as response:
                        result = await response.json()
                        
                        if result.get('ok'):
                            print(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {photo_path}")
                            return True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                            return False
                            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def send_photo_from_url(self, photo_url: str, caption: str = "", parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø–æ URL —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞–Ω–∞–ª"""
        try:
            url = f"{self.api_url}/sendPhoto"
            data = {
                'chat_id': self.channel_id,
                'photo': photo_url,
                'caption': caption,
                'parse_mode': parse_mode
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        print(f"‚úÖ –§–æ—Ç–æ –ø–æ URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {photo_url}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ URL: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ URL: {e}")
            return False
    
    def format_news_for_telegram(self, article: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è Telegram —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
        title = article.get('title', '')
        summary = article.get('summary', '') or article.get('post_text', '')
        
        # –û—á–∏—â–∞–µ–º summary –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if summary.startswith('‚öΩ'):
            summary = summary[2:].strip()
        
        # –£–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ summary –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        summary_clean = summary
        if '#—Ñ—É—Ç–±–æ–ª' in summary:
            summary_clean = summary.split('#—Ñ—É—Ç–±–æ–ª')[0].strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
        message = f"<b>‚öΩ {title}</b>\n\n"
        
        if summary_clean and summary_clean != title:
            message += f"{summary_clean}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        message += "üè∑ #—Ñ—É—Ç–±–æ–ª #–Ω–æ–≤–∏–Ω–∏ #—Å–ø–æ—Ä—Ç #football"
        
        return message
    
    async def post_article(self, article: Dict[str, Any]) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é –≤ –∫–∞–Ω–∞–ª"""
        try:
            print(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º: {article.get('title', '')[:50]}...")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            message_text = self.format_news_for_telegram(article)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_path = article.get('image_path', '')
            image_url = article.get('image_url', '')
            
            success = False
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
            if image_path and os.path.exists(image_path):
                success = await self.send_photo(image_path, message_text)
            
            # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ URL
            elif image_url:
                success = await self.send_photo_from_url(image_url, message_text)
            
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if not success:
                print("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ñ–æ—Ç–æ)")
                success = await self.send_message(message_text)
            
            if success:
                print(f"‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return False
    
    async def post_multiple_articles(self, articles: List[Dict[str, Any]], delay: int = 5) -> int:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏"""
        successful_posts = 0
        
        print(f"üì¢ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é {len(articles)} —Å—Ç–∞—Ç–µ–π –≤ –∫–∞–Ω–∞–ª")
        print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {delay} —Å–µ–∫—É–Ω–¥")
        print("=" * 60)
        
        for i, article in enumerate(articles, 1):
            print(f"\nüì§ –ü–æ—Å—Ç {i}/{len(articles)}")
            
            success = await self.post_article(article)
            
            if success:
                successful_posts += 1
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(articles):
                print(f"‚è≥ –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ—Å—Ç–æ–º...")
                await asyncio.sleep(delay)
        
        print(f"\nüìä –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {successful_posts}/{len(articles)}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {len(articles) - successful_posts}")
        
        return successful_posts
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API"""
        try:
            url = f"{self.api_url}/getMe"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        bot_info = result.get('result', {})
                        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
                        print(f"ü§ñ –ë–æ—Ç: @{bot_info.get('username', 'unknown')}")
                        print(f"üìã –ò–º—è: {bot_info.get('first_name', 'unknown')}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
class TelegramPosterSync:
    def __init__(self, bot_token: str = None, channel_id: str = None):
        self.poster = TelegramPoster(bot_token, channel_id)
    
    def post_articles(self, articles: List[Dict[str, Any]], delay: int = 5) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π"""
        return asyncio.run(self.poster.post_multiple_articles(articles, delay))
    
    def test_connection(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return asyncio.run(self.poster.test_connection())
    
    def post_single_article(self, article: Dict[str, Any]) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        return asyncio.run(self.poster.post_article(article))

def test_telegram_poster():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø–æ—Å—Ç–µ—Ä–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ü–û–°–¢–ï–†–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
    
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export TELEGRAM_BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        return
    
    if not channel_id:
        print("‚ùå TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export TELEGRAM_CHANNEL_ID='@–≤–∞—à_–∫–∞–Ω–∞–ª' –∏–ª–∏ '-1001234567890'")
        return
    
    try:
        poster = TelegramPosterSync()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if poster.test_connection():
            print("\nüß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            test_article = {
                'title': '–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞',
                'summary': '–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞',
                'image_path': '',
                'image_url': '',
                'url': 'https://football.ua/'
            }
            
            success = poster.post_single_article(test_article)
            
            if success:
                print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_telegram_poster()

